name: Run checks
on:
  push:
    branches: [main]
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize]

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  checks:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        include:
          - name: format
            command: npx nx format:check --all
          - name: lint
            command: npx nx run-many --target=lint:check --all
          - name: test-server
            command: npx nx run dmr-server:test
            envFile: apps/dmr-server/.env.example
          - name: test-agent
            command: npx nx run dmr-agent:test
            envFile: apps/dmr-agent/.env.example
          - name: test-e2e
            command: npx nx run-many --target=test:e2e --all
    name: ${{ matrix.name }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup

      - name: Load env vars if needed
        if: matrix.envFile != null
        run: |
          set -o allexport
          source ${{ matrix.envFile }}
          set +o allexport

      - run: ${{ matrix.command }}

  build:
    needs: checks
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        app: [dmr-server, dmr-agent]
    name: build-${{ matrix.app }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
      - name: Build Docker image
        run: |
          APP_PATH="apps/${{ matrix.app }}/Dockerfile"
          if [ -f "$APP_PATH" ]; then
            echo "Building Docker image for ${{ matrix.app }}"
            docker build -f "$APP_PATH" .
          fi
